name: LLVM prebuilt
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'release version'
        required: true
        default: '18.1.1'

jobs:
  build:
    name: LLVM ${{github.event.inputs.version}} [${{matrix.arch}}-${{matrix.os}}]
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        os: [ windows ]

        include:
          - os: windows
            runner: windows-2022

          - arch: x86_64
            os: windows
            msvc: amd64
    steps:
      - name: Configure Windows runner
        if: runner.os == 'Windows'
        run: |
          choco install ninja 7zip

      - name: Clone project
        uses: actions/checkout@v3
        with:
          path: llvm-prebuilt

      - name: Clone LLVM ${{github.event.inputs.version}}
        uses: actions/checkout@v3
        with:
          repository: llvm/llvm-project
          ref: llvmorg-${{github.event.inputs.version}}
          path: llvm-project

      - name: Patch LLVM
        shell: pwsh
        run: |
          git -C llvm-project apply ../llvm-prebuilt/patches/llvm-16-add-lld-install-targets.patch
          git -C llvm-project apply ../llvm-prebuilt/patches/llvm-16-add-llvm-name-prefix-to-llc-lli-opt-tools.patch
          git -C llvm-project apply ../llvm-prebuilt/patches/llvm-16-force-disable-clang-ast-introspection.patch

      - name: Enable Windows host environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Configure LLVM host tools
        shell: pwsh
        run: |
          cmake -G "Visual Studio 17 2022" -S llvm-project/llvm -B llvm-host `
            -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" `
            -DCMAKE_BUILD_TYPE=Release -Wno-dev

      - name: Build LLVM host tools
        shell: pwsh
        run: |
          cmake --build llvm-host --target llvm-tblgen clang-tblgen llvm-config
          
          cmake --build llvm-host --target clang-tidy-confusable-chars-gen clang-pseudo-gen
          
          $HostBinPath = "$Env:GITHUB_WORKSPACE/llvm-host/bin"
          $ExeExt = if ($IsWindows) { ".exe" } else { "" }
          echo "LLVM_NATIVE_TOOL_DIR=$HostBinPath" >> $Env:GITHUB_ENV
          echo "LLVM_TABLEGEN=$HostBinPath/llvm-tblgen$ExeExt" >> $Env:GITHUB_ENV
          echo "CLANG_TABLEGEN=$HostBinPath/clang-tblgen$ExeExt" >> $Env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=$HostBinPath/llvm-config$ExeExt" >> $Env:GITHUB_ENV
          echo "LLVM_VERSION=${{github.event.inputs.version}}" >> $Env:GITHUB_ENV

      - name: Enable Windows target environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.msvc}}

      - name: Configure LLVM
        shell: pwsh
        run: |
          $TargetName = "${{matrix.arch}}-${{matrix.os}}"
          $CMakeToolchainFile = "$Env:GITHUB_WORKSPACE/llvm-prebuilt/cmake/$TargetName.cmake"
          $CMakeInitialCache = "$Env:GITHUB_WORKSPACE/llvm-prebuilt/cmake/llvm-distribution.cmake"

          $CMakeArgs = @()

          cmake -G Ninja -S llvm-project/llvm -B llvm-build $CMakeArgs `
            -DCMAKE_INSTALL_PREFIX=llvm-install `
            -DCMAKE_TOOLCHAIN_FILE="$CMakeToolchainFile" `
            -C $CMakeInitialCache -Wno-dev

      - name: Build LLVM
        run: cmake --build llvm-build

      - name: Install LLVM
        run: cmake --build llvm-build --target install-distribution

      - name: Package LLVM
        if: runner.os != 'Windows'
        run: |
          mv llvm-install clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}
          tar -cJf clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}

      - name: Package LLVM
        if: runner.os == 'Windows'
        run: |
          ren llvm-install clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}
          cmd.exe /c "7z a -ttar -snl -so clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}.tar clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}} | 7z a -si clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz"

      - name: Upload LLVM package
        uses: actions/upload-artifact@v3
        with:
          name: clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}
          path: clang+llvm-${{github.event.inputs.version}}-${{matrix.arch}}-${{matrix.os}}.tar.xz
